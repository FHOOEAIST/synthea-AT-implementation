---
name: AT-coreprofile-mapping

applicability: true

actions:
 - name: Apply to AT Core Profiles
   profiles:
   - profile: https://fhir.hl7.at/r5-core-main/StructureDefinition-at-core-patient.html
     applicability: Patient

 - name: testKeepResources
   keep_resources:
     - Patient
     - Encounter
     - Condition
     - Procedure
     - Observation
     - DiagnosticReport
     - CarePlan
     - MedicationRequest

 - name: create AT-Patient
   create_resource: 
    - resourceType: Patient
      based_on:
        resource: Patient
      fields:
        - location: Patient.id
          value: $getField([Patient.id])
        - location: Patient.meta
          value: $getField([Patient.meta[0]])
        - location: Patient.text
          value: $getField([Patient.text])
        - location: Patient.identifier
          value: $getField([Patient.identifier]) 
        - location: Patient.active
          value: $getField([Patient.active])
        - location: Patient.name.family
          value: $getField([Patient.name.family])
        - location: Patient.name.given
          value: $getField([Patient.name.given])
        - location: Patient.name.prefix
          value: $getField([Patient.name.prefix])
        - location: Patient.telecom
          value: $getField([Patient.telecom])
        - location: Patient.gender
          value: $getField([Patient.gender])
        - location: Patient.birthDate
          value: $getField([Patient.birthDate])
        - location: Patient.deceased
          value: $getField([Patient.deceased])
        - location: Patient.address.use
          value: "home"
        - location: Patient.address.line
          value: $getField([Patient.address.line])
        - location: Patient.address.city
          value: $getField([Patient.address.city])
        - location: Patient.address.state
          value: $getField([Patient.address.state])
        - location: Patient.address.postalCode
          value: $getField([Patient.address.postalCode])
        - location: Patient.address.country
          value: $getField([Patient.address.country])
        - location: Patient.maritalStatus
          value: $getField([Patient.maritalStatus])
        - location: Patient.multipleBirth[x]
          value: $getField([Patient.multipleBirth[x]])
        - location: Patient.photo
          value:
              contentType: "image/jpeg"
              url: "https://thispersondoesnotexist.tools/"
        - location: Patient.contact
          value: $getField([Patient.contact])
        - location: Patient.communication.language.coding
          value:
              system: "urn:ietf:bcp:47"
              code: "de"
        - location: Patient.communication.preferred
          value: "true"
        - location: Patient.generalPractitioner
          value: $getField([Patient.generalPractitioner])
        - location: Patient.managingOrganization
          value: $getField([Patient.managingOrganization])
        - location: Patient.link
          value: $getField([Patient.link])
      writeback:
        - location: Patient.deceased
          value: $getField([Patient.deceased])
        - location: Patient.multipleBirth[x]
          value: $getField([Patient.multipleBirth[x]])

 - name: applyBoolean
   execute_script:
     - apply_to: bundle
       function_name: applyBoolean
       function: |
        function applyBoolean(bundle) {
            bundle.entry.forEach(entry => {
                if (entry.resource.resourceType === "Patient") {
                    if (entry.resource.multipleBirthBoolean != "undefined") {
                        bundle.entry.filter(e => e.resource.resourceType === "Patient")
                            .forEach(patientEntry => {
                                patientEntry.resource.multipleBirthBoolean = entry.resource.multipleBirthBoolean;
                                if (entry.resource.multipleBirthBoolean){
                                   patientEntry.resource.multipleBirthInteger = entry.resource.multipleBirthInteger;
                                }
                            });
                    }
                    if (entry.resource.deceasedBoolean != "undefined") {
                        bundle.entry.filter(e => e.resource.resourceType === "Patient")
                            .forEach(patientEntry => {
                                patientEntry.resource.deceased = entry.resource.deceased;
                                  if (entry.resource.deceasedBoolean){
                                   patientEntry.resource.deceasedDateTime = entry.resource.deceasedDateTime;
                                }
                            });
                    }
                }
            });
            return bundle;
        }

 - name: applyIdentifier
   execute_script:
     - apply_to: resource
       function_name: applyIdentifier
       function: |
         function applyIdentifier(resource, bundle) {
          if(resource.resourceType == "Patient"){
            var BufferedReader = Java.type("java.io.BufferedReader");
            var FileReader = Java.type("java.io.FileReader");
            var Math = Java.type("java.lang.Math")
            // Create a FileReader to read the JSON file
            var reader = new BufferedReader(new FileReader("src/main/resources/templates/mappings/AT-identifier.json"));
            // Read the JSON content
            var jsonContent = "";
            var line;
            while ((line = reader.readLine()) !== null) {
                jsonContent += line;
            }
            var jsonObject = JSON.parse(jsonContent);
            var min = Math.pow(10, 9);
            var max = Math.pow(10, 10) - 1; 
            var number = Math.floor(Math.random() * (max - min + 1)) + min;
            var SocialSecurityNumber = jsonObject[0]
            var NationalUniqueIndividualIdentifier = jsonObject[1]
            var PatientInternalIdentifier = jsonObject[2]
            SocialSecurityNumber.value = number.toString();
            min = Math.pow(4, 3);
            max = Math.pow(4, 4) - 1; 
            number = Math.floor(Math.random() * (max - min + 1)) + min;
            PatientInternalIdentifier.value = number.toString();
            resource.identifier = [SocialSecurityNumber,NationalUniqueIndividualIdentifier,PatientInternalIdentifier]
            return resource
          }
          }

 - name: applyExtensions
   execute_script:
     - apply_to: resource
       function_name: applyExtensions
       function: |
         function applyExtensions(resource, bundle) {
          var BufferedReader = Java.type("java.io.BufferedReader");
          var FileReader = Java.type("java.io.FileReader");
          var Math = Java.type("java.lang.Math")
          var ArrayList = Java.type("java.util.ArrayList");
          if(resource.resourceType == "Patient"){
            var data = new ArrayList();
            // Create a FileReader to read the JSON file
            var reader = new BufferedReader(new FileReader("src/main/resources/templates/mappings/AT-extensions.json"));
            // Read the JSON content
            var jsonContent = "";
            var line;
            while ((line = reader.readLine()) !== null) {
                jsonContent += line;
            }
            var jsonObject = JSON.parse(jsonContent);
            var PatientReligion = jsonObject[0]
            var citizenship = jsonObject[1]
            var reader = new BufferedReader(new FileReader("src/main/resources/AT-religion.csv"));
            while ((line = reader.readLine()) !== null) {
                var values = line.split(",");
                data.add(values);
            }
            var religionData = [];
            for (var i = 0; i < data.size(); i++) {
                religionData.push(data.get(i));
            }
            var randomNumber = Math.random() * 100;
            var chosenReligion = "RÃ¶misch-Katholisch";
            var chosenReligionCode = 101;
            var cumulativePercentage = 0;
            for (var i = 0; i < religionData.length; i++) {
                cumulativePercentage += parseFloat(religionData[i][2]);
                if (randomNumber <= cumulativePercentage) {
                    chosenReligionCode = religionData[i][0];
                    chosenReligion = religionData[i][1];
                    break;
                }
            }
            PatientReligion.extension[0].valueCodeableConcept.coding[0].code = chosenReligionCode
            PatientReligion.extension[0].valueCodeableConcept.coding[0].display = chosenReligion
            PatientRelgigion = {PatientReligion}
            extension = [PatientReligion,citizenship]	
            resource.extension = extension
          }
          return resource
          }

# - name: create AuditEvent
#   create_resource: 
#    - resourceType: AuditEvent
#      based_on:
#        resource: Encounter
#      fields:
#        - location: AuditEvent.action
#          value: "C"
#        - location: AuditEvent.recorded
#          value: $getField([Encounter.period.start])
#        - location: AuditEvent.occuredDateTime
#          value: $getField([Encounter.period.start])
#        - location: AuditEvent.outcome.code
#          value: "0"
#        - location: AuditEvent.encounter
#         value: $getField([Encounter.fullUrl])

# - name: applyReference
#   execute_script:
#     - apply_to: resource
#       function_name: applyReference
#       function: |
#         function applyReference(resource, bundle) {
#          var BufferedReader = Java.type("java.io.BufferedReader");
#          var FileReader = Java.type("java.io.FileReader");
#          var Math = Java.type("java.lang.Math")
#          var ArrayList = Java.type("java.util.ArrayList");
#          if(resource.resourceType == "AuditEvent"){  
#            let patientReference;
#            let type;
#            for (const ent of bundle.entry){
#              if (ent.resource.resourceType == "Patient"){
#                patientReference = ent.fullUrl
#                console.log("AUDITEVENNTTTT")
#                break;
#              }
#            }
#            entity = {what:patientReference}
#            entity = {entity:entity}
#            resource.entity = entity
#           console.log(JSON.stringify(resource))
#         }
#         return resource
#         }

